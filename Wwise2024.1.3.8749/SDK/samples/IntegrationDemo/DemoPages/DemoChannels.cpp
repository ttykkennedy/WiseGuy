/*******************************************************************************
The content of this file includes portions of the AUDIOKINETIC Wwise Technology
released in source code form as part of the SDK installer package.

Commercial License Usage

Licensees holding valid commercial licenses to the AUDIOKINETIC Wwise Technology
may use this file in accordance with the end user license agreement provided 
with the software or, alternatively, in accordance with the terms contained in a
written agreement between you and Audiokinetic Inc.

  Copyright (c) 2025 Audiokinetic Inc.
*******************************************************************************/

// DemoChannels.cpp
/// \file 
/// Defines the methods declared in DemoChannels.h.

#include "stdafx.h"
#include "Platform.h"

#include <AK/SoundEngine/Common/AkSoundEngine.h>    // Sound engine
#include "../WwiseProject/GeneratedSoundBanks/Wwise_IDs.h"		// IDs generated by Wwise

#include "Menu.h"
#include "LabelControl.h"
#include "IntegrationDemo.h"
#include "DemoChannels.h"
#include "DemoOptionsUtil.h"


const char* s_channelConfiguration = "Channel configuration:";
const char* s_audioFiles = "Audio files:";


static std::string GetChannelConfig()
{
	std::string strConfig;

	AkChannelConfig channelConfig;
	Ak3DAudioSinkCapabilities capabilities;
	
	AKRESULT result = AK::SoundEngine::GetOutputDeviceConfiguration(0, channelConfig, capabilities);
	if (result == AK_Success)
	{
		const char** pNames;
		AkChannelConfig* pConfigs;
		AkUInt32 uCount = demoOptionsUtil::GetDefaultSpeakerConfigs(pNames, pConfigs);

		AkChannelConfig* pChannelConfig = &channelConfig;
		if (channelConfig.eConfigType == AK_ChannelConfigType_Objects)
			pChannelConfig = &capabilities.channelConfig;

		for ( AkUInt32 i = 0; i < uCount; ++i )
		{
			if (*pChannelConfig == pConfigs[i])
			{
				strConfig = pNames[i];
				break;
			}
		}

		if (strConfig.empty())
			strConfig = "Other (" + std::to_string(channelConfig.uNumChannels) + ")";
		if (channelConfig.eConfigType == AK_ChannelConfigType_Objects)
			strConfig += ", with 3D Audio";
	}

	if (strConfig.empty())
		strConfig = "Error retrieving channel configuration";

	return strConfig;
}


/////////////////////////////////////////////////////////////////////
// DemoChannels Public Methods
/////////////////////////////////////////////////////////////////////

DemoChannels::DemoChannels( Menu& in_ParentMenu ):Page( in_ParentMenu, "Channels Demo" )
{
	m_szHelp  = "This page offers the playback of audio files of various channel configurations.";
}

bool DemoChannels::Init()
{
	// Load the sound bank
	AkBankID bankID; // Not used
	AK::SoundEngine::LoadBank("Channels.bnk", bankID);

	// Register the "Human" game object
	AK::SoundEngine::RegisterGameObj( GAME_OBJECT_CHANNELS, "Channels" );
	
	// Initlialize the page
	return Page::Init();
}

void DemoChannels::Release()
{
	// Unregister the "Human" game object
	AK::SoundEngine::UnregisterGameObj( GAME_OBJECT_CHANNELS );

	// Unload the sound bank
	AK::SoundEngine::UnloadBank( "Channels.bnk", nullptr );

	// Release the page
	Page::Release();
}

void DemoChannels::InitControls()
{
	ButtonControl* newBtn;

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Play mono" );
	newBtn->SetDelegate( (PageMFP)&DemoChannels::Play_1_0 );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Play stereo" );
	newBtn->SetDelegate( (PageMFP)&DemoChannels::Play_2_0 );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Play 5.1" );
	newBtn->SetDelegate( (PageMFP)&DemoChannels::Play_5_1 );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Play 7.1" );
	newBtn->SetDelegate( (PageMFP)&DemoChannels::Play_7_1 );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Play 7.1.4" );
	newBtn->SetDelegate( (PageMFP)&DemoChannels::Play_7_1_4 );
	m_Controls.push_back( newBtn );

	PositionControls();
}

void DemoChannels::PositionControls()
{
	int iHeight = m_pParentMenu->GetHeight();
	int iWidth  = m_pParentMenu->GetWidth();

	int xPos = iWidth / 8;
	int yPos = iHeight / 10;

	// One line for the title and a blank line under that, same height.
	yPos += 2 * GetLineHeight(DrawStyle_Title);;

	// One line for channel configuration title label and text.
	yPos += GetLineHeight(DrawStyle_Control);

	// Blank line.
	yPos += GetLineHeight(DrawStyle_Control);

	// Place each control.
	xPos += 5 * iWidth / 16;
	
	for (int i = 0; i < (int)m_Controls.size(); ++i)
	{
		m_Controls[i]->SetPosition( xPos, yPos );
		yPos += GetLineHeight(DrawStyle_Control);
	}
}

void DemoChannels::Draw()
{
	int iHeight = m_pParentMenu->GetHeight();
	int iWidth  = m_pParentMenu->GetWidth();

	// Draw the page title
	int xPos = iWidth / 8;
	int yPos = iHeight / 10;
	DrawTextOnScreen( m_szPageTitle.c_str(), xPos, yPos, DrawStyle_Title );
	yPos += GetLineHeight( DrawStyle_Title );

	// Add blank line
	yPos += GetLineHeight( DrawStyle_Title );

	int xLabel = xPos + iWidth / 16;
	int xText = xPos + 5 * iWidth / 16;

	// Get channel configuration string.
	std::string channelConfig = GetChannelConfig();

	// Draw channel configuration label.
	DrawTextOnScreen( s_channelConfiguration, xLabel, yPos, DrawStyle_Control );

	// Draw channel configuration text.
	DrawTextOnScreen( channelConfig.c_str(), xText, yPos, DrawStyle_Control );

	// Move to next line and add blank line.
	yPos += 2 * GetLineHeight( DrawStyle_Control );

	// Draw audio files label.
	DrawTextOnScreen( s_audioFiles, xLabel, yPos, DrawStyle_Control );

	// Draw the controls
	// Tell the controls to draw themselves
	for (int i = 0; i < (int)m_Controls.size(); i++)
	{
		auto style = (i == m_iSelectedIndex) ? DrawStyle_Selected : DrawStyle_Control;
		m_Controls[i]->Draw(style);
	}
}

void DemoChannels::Play_1_0( void*, ControlEvent*)
{
	AK::SoundEngine::PostEvent( AK::EVENTS::PLAY_1_0, GAME_OBJECT_CHANNELS );
}

void DemoChannels::Play_2_0( void*, ControlEvent* )
{
	AK::SoundEngine::PostEvent( AK::EVENTS::PLAY_2_0, GAME_OBJECT_CHANNELS );
}

void DemoChannels::Play_5_1( void*, ControlEvent* )
{
	AK::SoundEngine::PostEvent( AK::EVENTS::PLAY_5_1, GAME_OBJECT_CHANNELS );
}

void DemoChannels::Play_7_1( void*, ControlEvent* )
{
	AK::SoundEngine::PostEvent( AK::EVENTS::PLAY_7_1, GAME_OBJECT_CHANNELS );
}

void DemoChannels::Play_7_1_4( void*, ControlEvent* )
{
	AK::SoundEngine::PostEvent( AK::EVENTS::PLAY_7_1_4, GAME_OBJECT_CHANNELS );
}
