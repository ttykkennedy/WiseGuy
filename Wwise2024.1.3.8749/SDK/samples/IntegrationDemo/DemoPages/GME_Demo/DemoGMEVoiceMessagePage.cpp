/*******************************************************************************
The content of this file includes portions of the AUDIOKINETIC Wwise Technology
released in source code form as part of the SDK installer package.

Commercial License Usage

Licensees holding valid commercial licenses to the AUDIOKINETIC Wwise Technology
may use this file in accordance with the end user license agreement provided 
with the software or, alternatively, in accordance with the terms contained in a
written agreement between you and Audiokinetic Inc.

  Copyright (c) 2025 Audiokinetic Inc.
*******************************************************************************/

#include "stdafx.h"

#include <AK/SoundEngine/Common/AkSoundEngine.h>    // Sound engine
#include "GMEDefines.h"

#ifdef INTDEMO_GME

#include "Platform.h"
#include "Wwise_IDs.h"		// IDs generated by Wwise
#include "Menu.h"
#include "DemoGMEVoiceMessagePage.h"

extern "C" int  GMEWWisePlugin_ClearCache();

using namespace std;

#define MICRO_GAME_OBJECT_MUSIC         12
#define MICRO_GAME_OBJECT_SOURCE        21
#define MICRO_GAME_OBJECT_RECEIVEALL    66666666

DemoGMEVoiceMessagePage::DemoGMEVoiceMessagePage (Menu &in_ParentMenu ) : DemoGMEBasePage(in_ParentMenu)
{
	language = "en-US";

	m_nLocalMusicStatus = 0;
	m_nSendStatus = 0;
	m_nReceiveAllStatus = 0;
	m_nRecordStatus = 0;
	m_nPlayStatus = 0;
	m_nPlayIndexStatus = 0;
	fileIndex = 0;

	m_szHelp = "This page allows you to test recording and playing voice message through GME with the "
		"provided demo project.\n\n"
		"Refer to the documentation available in the Wwise Launcher.\n"
		"On the Plug-ins page, open the Help (?) menu and select \"Documentation\"\n";
}

bool DemoGMEVoiceMessagePage::Init()
{
	// Load the sound bank
	AkBankID bankID; // Not used
	if (AK::SoundEngine::LoadBank("GME.bnk", bankID) != AK_Success)
	{
		SetLoadFileErrorMessage("GME.bnk");
		return false;
	}

	// Register the "Micro" game object on which the sound recorded from the micro will be played
	AK::SoundEngine::RegisterGameObj(MICRO_GAME_OBJECT_MUSIC, "GameSound");
	AK::SoundEngine::RegisterGameObj(MICRO_GAME_OBJECT_SOURCE, "Send");
	AK::SoundEngine::RegisterGameObj(MICRO_GAME_OBJECT_RECEIVEALL, "Receive");

	// Initialize the page
	return Page::Init();
}

void DemoGMEVoiceMessagePage::Release()
{
	GMEWWisePlugin_StopPlayFile();
	GMEWWisePlugin_StopRecording();

	AK::SoundEngine::PostEvent(/*AK::EVENTS::STOP_ORIGINAL*/"Stop_original", MICRO_GAME_OBJECT_MUSIC);
	AK::SoundEngine::PostEvent(/*AK::EVENTS::STOP_GME_SEND*/"Stop_gme_send", MICRO_GAME_OBJECT_SOURCE);
	AK::SoundEngine::PostEvent(/*AK::EVENTS::STOP_GME_RECEIVE*/"Stop_gme_receive", MICRO_GAME_OBJECT_RECEIVEALL);

	AK::SoundEngine::UnregisterGameObj(MICRO_GAME_OBJECT_MUSIC);
	AK::SoundEngine::UnregisterGameObj(MICRO_GAME_OBJECT_SOURCE);
	AK::SoundEngine::UnregisterGameObj(MICRO_GAME_OBJECT_RECEIVEALL);
	AK::SoundEngine::UnloadBank("GME.bnk", NULL);

	Page::Release();
}

bool DemoGMEVoiceMessagePage::Update()
{
	int localUTCTime = 0;
	int messageType = 0;
	int code = 0;
	char message[256] = {0};
	char message2[256] = {0};
	char result[512] = {0};
	GMEWWisePlugin_GetMessage(&localUTCTime, &messageType, &code, message, 256, message2, 256);

	switch (messageType)
	{
		case GMESDK_MESSAGETYPE_RECORD_COMPLETE: // RECORD
			fileID = message;
			text = message2;
			if (code == 0) {
				mRecordButton->SetLabel("Record/Upload Voice Message: {Stop}");
				m_nRecordStatus = 0;
				snprintf(result, sizeof(result), "Final Recognition Results: %s\nFileID: %s", text.c_str(), fileID.c_str());
			} else {
				snprintf(result, sizeof(result), "Record failed! Error code: %d",code);
			}
			outPutString = result;
			break;

		case  GMESDK_MESSAGETYPE_PLAYOUT_COMPLETE: // PLAY
			fileID = message;
			if (code == 0) {
				snprintf(result, sizeof(result), "Play Suc FileID: %s", fileID.c_str());
			} else {
				snprintf(result, sizeof(result), "Play failed! Error code: %d\nfileID: %s", code, fileID.c_str());
			}
			outPutString = result;

			mPlayMessageBtn->SetLabel("Download/Play Voice Message: {Stop}");
			m_nPlayStatus = 0;
			m_nPlayIndexStatus = 0;
			break;

		case  GMESDK_MESSAGETYPE_ASR_COMPLETE: // ASR
			fileID = message;
			text = message2;
			if (code == 0) {
				snprintf(result, sizeof(result), "Speech-to-Text Suc Text: %s\nFileID: %s", text.c_str(), fileID.c_str());
			} else {
				snprintf(result, sizeof(result), "Speech-to-Text failed! Error code: %d\nfileID: %s", code, fileID.c_str());
			}
			outPutString = result;
			break;

		case  GMESDK_MESSAGETYPE_GETVOICEDURATION_COMPLETE: // Get message duration
			fileID = message;
			text = message2;
			if (code == 0) {
				snprintf(result, sizeof(result), "Voice Duration: %sms\nFileID: %s", text.c_str(), fileID.c_str());
			} else {
				snprintf(result, sizeof(result), "GetVoiceDuration failed! Error code: %d\nfileID: %s", code, fileID.c_str());
			}
			outPutString = result;
			break;

		case  GMESDK_MESSAGETYPE_RECORD_ASR_INTERMEDIATE:
			if (code == 0) {
				snprintf(result, sizeof(result), "Intermediate Recognition Results: %s", message);
			} else {
				snprintf(result, sizeof(result), "Intermediate recognition errorcode: %d", code);
			}
			outPutString = result;
			break;

		default:
			break;
	}

	return Page::Update();
}

void DemoGMEVoiceMessagePage::Draw()
{
	Page::Draw();
	int iHeight = m_pParentMenu->GetHeight();
	int iWidth  = m_pParentMenu->GetWidth();
	DrawTextOnScreen(outPutString.c_str(), 0, iHeight*5 / 6, DrawStyle_Text);
}

void DemoGMEVoiceMessagePage::InitControls()
{
	DemoGMEBasePage::AddIdControls();

	ButtonControl* newBtn = NULL;
	newBtn = new ButtonControl(*this);
	newBtn->SetLabel("Local Music: {Stop}");
	newBtn->SetDelegate((PageMFP)&DemoGMEVoiceMessagePage::PlayGameSoundButton_Pressed);
	m_Controls.push_back(newBtn);

	newBtn = new ButtonControl(*this);
	newBtn->SetLabel("Send: {Stop}");
	newBtn->SetDelegate((PageMFP)&DemoGMEVoiceMessagePage::GMESendButton_Pressed);
	m_Controls.push_back(newBtn);

	newBtn = new ButtonControl(*this);
	newBtn->SetLabel("Receive: {Stop}");
	newBtn->SetDelegate((PageMFP)&DemoGMEVoiceMessagePage::GMERecAllButton_Pressed);
	m_Controls.push_back(newBtn);

	newBtn = new ButtonControl(*this);
	mRecordButton = newBtn;
	newBtn->SetLabel("Record/Upload Voice Message: {Stop}");
	newBtn->SetDelegate((PageMFP)&DemoGMEVoiceMessagePage::StartRecordButton_Pressed);
	m_Controls.push_back(newBtn);

	mPlayMessageBtn = new ButtonControl(*this);
	mPlayMessageBtn->SetLabel("Download/Play Voice Message: {Stop}");
	mPlayMessageBtn->SetDelegate((PageMFP)&DemoGMEVoiceMessagePage::PlayoutButton_Pressed);
	m_Controls.push_back(mPlayMessageBtn);

	ToggleControl* mLanguageBtn = new ToggleControl(*this);
	mLanguageBtn = new ToggleControl(*this);
	mLanguageBtn->SetLabel("ASR Language:");
	mLanguageBtn->AddOption("English", reinterpret_cast<void*>(const_cast<char*>("en-US")));
	mLanguageBtn->AddOption("Chinese", reinterpret_cast<void*>(const_cast<char*>("cmn-Hans-CN")));
	mLanguageBtn->AddOption("Japanese", reinterpret_cast<void*>(const_cast<char*>("ja-JP")));
	mLanguageBtn->AddOption("Korean", reinterpret_cast<void*>(const_cast<char*>("ko-KR")));
	mLanguageBtn->AddOption("Cantonese", reinterpret_cast<void*>(const_cast<char*>("yue-Hant-HK")));
	mLanguageBtn->SetDelegate((PageMFP)&DemoGMEVoiceMessagePage::ASRLanguage_ValueChanged);
	mLanguageBtn->CallDelegate(nullptr);
	m_Controls.push_back(mLanguageBtn);

	newBtn = new ButtonControl(*this);
	newBtn->SetLabel("ASR of Voice Message");
	newBtn->SetDelegate((PageMFP)&DemoGMEVoiceMessagePage::ASRButton_Pressed);
	m_Controls.push_back(newBtn);

	newBtn = new ButtonControl(*this);
	newBtn->SetLabel("Duration of Voice Message");
	newBtn->SetDelegate((PageMFP)&DemoGMEVoiceMessagePage::VoiceDurationButton_Pressed);
	m_Controls.push_back(newBtn);
}

void DemoGMEVoiceMessagePage::PlayGameSoundButton_Pressed(void* in_pSender, ControlEvent* in_pEvent)
{
	ButtonControl* sender = (ButtonControl*)in_pSender;
	int& status = m_nLocalMusicStatus;
	if (in_pEvent->iButton == UG_BUTTON3)
	{
		if (status == 0)	// Stopped
		{
			sender->SetLabel("Local Music: {Play}");
			status = 1;
			AK::SoundEngine::PostEvent(/*"AK::EVENTS::PLAY_ORIGINAL*/"Play_original", MICRO_GAME_OBJECT_MUSIC);
		}
		else
		{
			sender->SetLabel("Local Music: {Stop}");
			status = 0;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::STOP_ORIGINAL*/"Stop_original", MICRO_GAME_OBJECT_MUSIC);
		}
	}
	if (in_pEvent->iButton == UG_BUTTON4)
	{
		if (status == 1)	// Playing
		{
			sender->SetLabel("Local Music: {Pause}");
			status = 2;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::PAUSE_ORIGINAL*/"Pause_original", MICRO_GAME_OBJECT_MUSIC);
		}
		else if (status == 2)	// Paused
		{
			sender->SetLabel("Local Music: {Play}");
			status = 1;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::RESUME_ORIGINAL*/"Resume_original", MICRO_GAME_OBJECT_MUSIC);
		}
	}
}

void DemoGMEVoiceMessagePage::GMESendButton_Pressed(void* in_pSender, ControlEvent* in_pEvent)
{
	ToggleControl* sender = (ToggleControl*)in_pSender;
	int& status = m_nSendStatus;
	if (in_pEvent->iButton == UG_BUTTON3)
	{
		if (status == 0)    // Stopped
		{
			sender->SetLabel("Send: {Play}");
			status = 1;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::PLAY_GME_SEND*/"Play_gme_send", MICRO_GAME_OBJECT_SOURCE);
		}
		else
		{
			sender->SetLabel("Send: {Stop}");
			status = 0;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::STOP_GME_SEND*/"Stop_gme_send", MICRO_GAME_OBJECT_SOURCE);
		}
	}
	if (in_pEvent->iButton == UG_BUTTON4)
	{
		if (status == 1)    // Playing
		{
			sender->SetLabel("Send: {Pause}");
			status = 2;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::PAUSE_GME_SEND*/"Pause_gme_send", MICRO_GAME_OBJECT_SOURCE);
		}
		else if (status == 2)    // Paused
		{
			sender->SetLabel("Send: {Play}");
			status = 1;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::RESUME_GME_SEND*/"Resume_gme_send", MICRO_GAME_OBJECT_SOURCE);
		}
	}
}

void DemoGMEVoiceMessagePage::GMERecAllButton_Pressed(void* in_pSender, ControlEvent* in_pEvent)
{
	ButtonControl* sender = (ButtonControl*)in_pSender;
	int& status = m_nReceiveAllStatus;
	if (in_pEvent->iButton == UG_BUTTON3)
	{
		if (status == 0)	// Stopped
		{
			sender->SetLabel("Receive: {Play}");
			status = 1;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::PLAY_GME_RECEIVE*/"Play_gme_receive", MICRO_GAME_OBJECT_RECEIVEALL);
		}
		else
		{
			sender->SetLabel("Receive: {Stop}");
			status = 0;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::STOP_GME_RECEIVE*/"Stop_gme_receive", MICRO_GAME_OBJECT_RECEIVEALL);
		}
	}
	if (in_pEvent->iButton == UG_BUTTON4)
	{
		if (status == 1)	// Playing
		{
			sender->SetLabel("Receive All: {Pause}");
			status = 2;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::PAUSE_GME_RECEIVE*/"Pause_gme_receive", MICRO_GAME_OBJECT_RECEIVEALL);
		}
		else if (status == 2)	// Paused
		{
			sender->SetLabel("Receive All: {Play}");
			status = 1;
			AK::SoundEngine::PostEvent(/*AK::EVENTS::RESUME_GME_RECEIVE*/"Resume_gme_receive", MICRO_GAME_OBJECT_RECEIVEALL);
		}
	}
}

void DemoGMEVoiceMessagePage::StartRecordButton_Pressed(void* in_pSender, ControlEvent* in_pEvent)
{
	ButtonControl* sender = (ButtonControl*)in_pSender;
	int& status = m_nRecordStatus;

	if (in_pEvent->iButton == UG_BUTTON3)
	{
		if (status == 0)	// Stopped
		{
			sender->SetLabel("Record/Upload Voice Message: {Start}");
			status = 1;
			GMEWWisePlugin_StartRecordingWithRecognition(language.c_str());
		}
		else
		{
			sender->SetLabel("Record/Upload Voice Message: {Stop}");
			status = 0;
			GMEWWisePlugin_StopRecording();
		}
	}
}

void DemoGMEVoiceMessagePage::PlayoutButton_Pressed(void* in_pSender, ControlEvent* in_pEvent)
{
	ButtonControl* sender = (ButtonControl*)in_pSender;
	int& status = m_nPlayStatus;

	if (in_pEvent->iButton == UG_BUTTON3)
	{
		if (status == 0)	// Stopped
		{
			sender->SetLabel("Download/Play Voice Message: {Start}");
			status = 1;
			if (fileID.length() <= 0)
			{
				GMEWWisePlugin_PlayRecordFile("https://gme-v2-gz-1256845520.cosgz.myqcloud.com/1400089356/354AECFB-6311-47b7-9528-8EE6EC41A598");
			}
			else
			{
				GMEWWisePlugin_PlayRecordFile(fileID.c_str());
			}
		}
		else
		{
			sender->SetLabel("Download/Play Voice Message: {Stop}");
			status = 0;
			GMEWWisePlugin_StopPlayFile();
		}
	}
}

void DemoGMEVoiceMessagePage::ASRLanguage_ValueChanged(void* in_pSender, ControlEvent*)
{
	ToggleControl* sender = (ToggleControl*)in_pSender;
	language = reinterpret_cast<const char*>(sender->SelectedValue());
}

void DemoGMEVoiceMessagePage::ASRButton_Pressed(void* in_pSender, ControlEvent* in_pEvent)
{
	outPutString = "Recognizing...";
	GMEWWisePlugin_SpeechToText(fileID.c_str(), language.c_str(), "");
}

void  DemoGMEVoiceMessagePage::VoiceDurationButton_Pressed(void* in_pSender, ControlEvent* in_pEvent)
{
	if (fileID.length() <= 0) {
		GMEWWisePlugin_GetVoiceFileDuration("https://gme-v2-gz-1256845520.cosgz.myqcloud.com/1400089356/354AECFB-6311-47b7-9528-8EE6EC41A598");
	}
	else {
		GMEWWisePlugin_GetVoiceFileDuration(fileID.c_str());
	}
}

#endif // INTDEMO_GME
